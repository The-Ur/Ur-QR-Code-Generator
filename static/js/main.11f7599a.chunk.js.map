{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","width","height","type","data","image","margin","qrOptions","typeNumber","mode","errorCorrectionLevel","imageOptions","hideBackgroundDots","imageSize","crossOrigin","dotsOptions","color","backgroundOptions","cornersSquareOptions","cornersDotOptions","options","setOptions","fileExt","setFileExt","QRCodeStyling","qrCode","ref","useRef","useEffect","current","append","update","className","style","styles","inputWrapper","value","onChange","event","target","inputBox","onClick","download","extension","display","justifyContent","maxWidth","flexGrow","marginRight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAce,SAASA,IACtB,MAA8BC,mBAAkB,CAC9CC,MAAO,IACPC,OAAQ,IACRC,KAAM,MACNC,KAAM,6BACNC,MAAO,YACPC,OAAQ,GACRC,UAAW,CACTC,WAAY,EACZC,KAAM,OACNC,qBAAsB,KAExBC,aAAc,CACZC,oBAAoB,EACpBC,UAAW,GACXP,OAAQ,GACRQ,YAAa,aAEfC,YAAa,CACXC,MAAO,UAMPb,KAAM,WAERc,kBAAmB,CACjBD,MAAO,WAOTE,qBAAsB,CACpBF,MAAO,UACPb,KAAM,OAORgB,kBAAmB,CACjBH,MAAO,UACPb,KAAM,SA9CV,mBAAOiB,EAAP,KAAgBC,EAAhB,KAsDA,EAA8BrB,mBAAoB,OAAlD,mBAAOsB,EAAP,KAAgBC,EAAhB,KACA,EAAiBvB,mBAAwB,IAAIwB,IAAcJ,IAApDK,EAAP,oBACMC,EAAMC,iBAAuB,MAEnCC,qBAAU,WACJF,EAAIG,SACNJ,EAAOK,OAAOJ,EAAIG,WAEnB,CAACJ,EAAQC,IAEZE,qBAAU,WACHH,GACLA,EAAOM,OAAOX,KACb,CAACK,EAAQL,IAoBZ,OACE,sBAAKY,UAAU,MAAf,UACE,2DACA,qBAAKN,IAAKA,IACV,sBAAKO,MAAOC,EAAOC,aAAnB,UACE,uBAAOC,MAAOhB,EAAQhB,KAAMiC,SAvBb,SAACC,GACpBjB,GAAW,SAAAD,GAAO,kCACbA,GADa,IAEhBhB,KAAMkC,EAAMC,OAAOH,YAoBmCH,MAAOC,EAAOM,WAClE,yBAAQH,SAjBY,SAACC,GACzBf,EAAWe,EAAMC,OAAOH,QAgBiBA,MAAOd,EAA5C,UACE,wBAAQc,MAAM,MAAd,iBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,qBAEF,wBAAQK,QAnBU,WACjBhB,GACLA,EAAOiB,SAAS,CACdC,UAAWrB,KAgBT,4BAMR,IAAMY,EAAS,CACbC,aAAc,CACZ7B,OAAQ,SACRsC,QAAS,OACTC,eAAgB,gBAChB5C,MAAO,OACP6C,SAAU,SAEZN,SAAU,CACRO,SAAU,EACVC,YAAa,KCpHFC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.11f7599a.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState, ChangeEvent } from \"react\";\nimport './App.css';\nimport QRCodeStyling, {\n  DrawType,\n  TypeNumber,\n  Mode,\n  ErrorCorrectionLevel,\n  DotType,\n  CornerSquareType,\n  CornerDotType,\n  Extension,\n  Options\n} from \"qr-code-styling\";\n\nexport default function App() {\n  const [options, setOptions] = useState<Options>({\n    width: 300,\n    height: 300,\n    type: 'svg' as DrawType,\n    data: 'http://qr-code-styling.com',\n    image: '/logo.svg',\n    margin: 10,\n    qrOptions: {\n      typeNumber: 4 as TypeNumber,\n      mode: 'Byte' as Mode,\n      errorCorrectionLevel: 'H' as ErrorCorrectionLevel\n    },\n    imageOptions: {\n      hideBackgroundDots: true,\n      imageSize: 0.4,\n      margin: 20,\n      crossOrigin: 'anonymous',\n    },\n    dotsOptions: {\n      color: '#222222',\n      // gradient: {\n      //   type: 'linear', // 'radial'\n      //   rotation: 0,\n      //   colorStops: [{ offset: 0, color: '#8688B2' }, { offset: 1, color: '#77779C' }]\n      // },\n      type: 'rounded' as DotType\n    },\n    backgroundOptions: {\n      color: '#5FD4F3',\n      // gradient: {\n      //   type: 'linear', // 'radial'\n      //   rotation: 0,\n      //   colorStops: [{ offset: 0, color: '#ededff' }, { offset: 1, color: '#e6e7ff' }]\n      // },\n    },\n    cornersSquareOptions: {\n      color: '#ffa620',\n      type: 'dot' as CornerSquareType,\n      // gradient: {\n      //   type: 'linear', // 'radial'\n      //   rotation: 180,\n      //   colorStops: [{ offset: 0, color: '#25456e' }, { offset: 1, color: '#4267b2' }]\n      // },\n    },\n    cornersDotOptions: {\n      color: '#009efa',\n      type: 'dot' as CornerDotType,\n      // gradient: {\n      //   type: 'linear', // 'radial'\n      //   rotation: 180,\n      //   colorStops: [{ offset: 0, color: '#00266e' }, { offset: 1, color: '#4060b3' }]\n      // },\n    }\n  });\n  const [fileExt, setFileExt] = useState<Extension>(\"svg\");\n  const [qrCode] = useState<QRCodeStyling>(new QRCodeStyling(options));\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (ref.current) {\n      qrCode.append(ref.current);\n    }\n  }, [qrCode, ref]);\n\n  useEffect(() => {\n    if (!qrCode) return;\n    qrCode.update(options);\n  }, [qrCode, options]);\n\n  const onDataChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setOptions(options => ({\n      ...options,\n      data: event.target.value\n    }));\n  };\n\n  const onExtensionChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setFileExt(event.target.value as Extension);\n  };\n\n  const onDownloadClick = () => {\n    if (!qrCode) return;\n    qrCode.download({\n      extension: fileExt\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <h2>QR code styling for React</h2>\n      <div ref={ref} />\n      <div style={styles.inputWrapper}>\n        <input value={options.data} onChange={onDataChange} style={styles.inputBox} />\n        <select onChange={onExtensionChange} value={fileExt}>\n          <option value=\"svg\">SVG</option>\n          <option value=\"png\">PNG</option>\n          <option value=\"jpeg\">JPEG</option>\n          <option value=\"webp\">WEBP</option>\n        </select>\n        <button onClick={onDownloadClick}>Download</button>\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  inputWrapper: {\n    margin: \"20px 0\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n    maxWidth: \"300px\"\n  },\n  inputBox: {\n    flexGrow: 1,\n    marginRight: 20\n  }\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}